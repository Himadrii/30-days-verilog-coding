//1. HALF ADDER

//Data Flow
`timescale 1ns / 1ps
module Half_adder(
input a,b,
output s,c
);
assign s = a ^ b; //xor gate
assign c = a & b; //and gate
endmodule

//Gate level
`timescale 1ns / 1ps

module half_adder_gl(
input a,b,
output c,s);
xor(s,a,b);
and(c,a,b);
endmodule

//Test bench
`timescale 1ns / 1ps
module half_adder_tb;
reg a_tb;
reg b_tb;
wire carry_tb;
wire sum_tb;
Half_adder dut(.a(a_tb), .b(b_tb),.s(sum_tb), .c(carry_tb));
initial 
begin
a_tb=1'b0;
b_tb=1'b0;
#10 a_tb=1'b0; b_tb=1'b0;
#10 a_tb=1'b0; b_tb=1'b1;
#10 a_tb=1'b1; b_tb=1'b0;
#10 a_tb=1'b1; b_tb=1'b1;
#20 $finish;
end
endmodule

//2.Full Adder

// Gate level
`timescale 1ns / 1ps
module full_adder(input a,b,cin,
    output sum,carry
);

wire w1,w2,w3;       //Internal connections
xor(w1,a,b);
xor(sum,w1,cin);        //Sum output
and(w2,a,b);
and(w3,w1,cin);
or(carry,w2,w3);     //carry output
endmodule

// Data flow
`timescale 1ns / 1ps
module full_adder(input a,b,cin,
    output sum,carry
);
assign sum= a^b^c;
assign carry= (a&b)| cin & (a^b);
endmodule

//Testbench
`timescale 1ns / 1ps
module full_adder_tb;
reg a_tb,b_tb,cin_tb;
wire sum_tb,carry_tb;

full_adder dut (.a(a_tb), .b(b_tb), .cin(cin_tb), .sum(sum_tb), .carry(carry_tb) );

initial begin

a_tb = 1'b0; b_tb = 1'b0; cin_tb = 1'b0;
#10 a_tb = 1'b0; b_tb = 1'b0; cin_tb = 1'b1;
#10 a_tb = 1'b0; b_tb = 1'b1; cin_tb = 1'b0;
#10 a_tb = 1'b0; b_tb = 1'b1; cin_tb = 1'b1;
#10 a_tb = 1'b1; b_tb = 1'b0; cin_tb = 1'b0;
#10 a_tb = 1'b1; b_tb = 1'b0; cin_tb = 1'b1;
#10 a_tb = 1'b1; b_tb = 1'b1; cin_tb = 1'b0;
#10 a_tb = 1'b1; b_tb = 1'b1; cin_tb = 1'b1;
#10 $stop;
end
endmodule

